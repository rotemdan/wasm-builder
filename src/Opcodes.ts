// Opcodes and their names were extracted from the latest Chromium source code:
///
// https://chromium.googlesource.com/v8/v8/+/refs/heads/main/src/wasm/wasm-opcodes.h
// or
// https://github.com/v8/v8/blob/main/src/wasm/wasm-opcodes.h
//
// Extraction:
//
// RegExp: V\(([^,]*), ([^,]*), ([^,]*), ([^\)]*)\).*
// Replace: $4: $2
// Clean up rest manually

export const wasmOpcodes = {
	// Statements
	'unreachable': 0x00,
	'nop': 0x01,
	'block': 0x02,
	'loop': 0x03,
	'if': 0x04,
	'else': 0x05,
	'try': 0x06,
	'catch': 0x07,
	'throw': 0x08,
	'rethrow': 0x09,
	'try_table': 0x1f,
	'throw_ref': 0x0a,
	'end': 0x0b,
	'br': 0x0c,
	'br_if': 0x0d,
	'br_table': 0x0e,
	'return': 0x0f,
	'delegate': 0x18,
	'catch_all': 0x19,
	'br_on_null': 0xd5,
	'br_on_non_null': 0xd6,
	'nop_for_testing': 0x16,

	// Constants, locals, globals, and calls
	'call': 0x10,
	'call_indirect': 0x11,
	'return_call': 0x12,
	'return_call_indirect': 0x13,
	'call_ref': 0x14,
	'return_call_ref': 0x15,
	'drop': 0x1a,
	'select': 0x1b,
	'select_with_type': 0x1c, // Not the official name (it's officially a variant of 'select')
	'local.get': 0x20,
	'local.set': 0x21,
	'local.tee': 0x22,
	'global.get': 0x23,
	'global.set': 0x24,
	'table.get': 0x25,
	'table.set': 0x26,
	'i32.const': 0x41,
	'i64.const': 0x42,
	'f32.const': 0x43,
	'f64.const': 0x44,
	'ref.null': 0xd0,
	'ref.is_null': 0xd1,
	'ref.func': 0xd2,
	'ref.as_non_null': 0xd4,

	// Load memory expressions
	'i32.load': 0x28,
	'i64.load': 0x29,
	'f32.load': 0x2a,
	'f64.load': 0x2b,
	'i32.load8_s': 0x2c,
	'i32.load8_u': 0x2d,
	'i32.load16_s': 0x2e,
	'i32.load16_u': 0x2f,
	'i64.load8_s': 0x30,
	'i64.load8_u': 0x31,
	'i64.load16_s': 0x32,
	'i64.load16_u': 0x33,
	'i64.load32_s': 0x34,
	'i64.load32_u': 0x35,
	'f32.load_f16': 0xfc30,

	// Store memory expressions
	'i32.store': 0x36,
	'i64.store': 0x37,
	'f32.store': 0x38,
	'f64.store': 0x39,
	'i32.store8': 0x3a,
	'i32.store16': 0x3b,
	'i64.store8': 0x3c,
	'i64.store16': 0x3d,
	'i64.store32': 0x3e,
	'f32.store_f16': 0xfc31,

	// Memory management expressions
	'memory.size': 0x3f,
	'memory.grow': 0x40,

	// Expressions with signatures.
	// The following opcodes can be used as constant expressions under
	// --experimental-wasm-extended-const
	'i32.add': 0x6a,
	'i32.sub': 0x6b,
	'i32.mul': 0x6c,
	'i64.add': 0x7c,
	'i64.sub': 0x7d,
	'i64.mul': 0x7e,
	'i32.eqz': 0x45,
	'i32.eq': 0x46,
	'i32.ne': 0x47,
	'i32.lt_s': 0x48,
	'i32.lt_u': 0x49,
	'i32.gt_s': 0x4a,
	'i32.gt_u': 0x4b,
	'i32.le_s': 0x4c,
	'i32.le_u': 0x4d,
	'i32.ge_s': 0x4e,
	'i32.ge_u': 0x4f,
	'i64.eqz': 0x50,
	'i64.eq': 0x51,
	'i64.ne': 0x52,
	'i64.lt_s': 0x53,
	'i64.lt_u': 0x54,
	'i64.gt_s': 0x55,
	'i64.gt_u': 0x56,
	'i64.le_s': 0x57,
	'i64.le_u': 0x58,
	'i64.ge_s': 0x59,
	'i64.ge_u': 0x5a,
	'f32.eq': 0x5b,
	'f32.ne': 0x5c,
	'f32.lt': 0x5d,
	'f32.gt': 0x5e,
	'f32.le': 0x5f,
	'f32.ge': 0x60,
	'f64.eq': 0x61,
	'f64.ne': 0x62,
	'f64.lt': 0x63,
	'f64.gt': 0x64,
	'f64.le': 0x65,
	'f64.ge': 0x66,
	'i32.clz': 0x67,
	'i32.ctz': 0x68,
	'i32.popcnt': 0x69,
	'i32.div_s': 0x6d,
	'i32.div_u': 0x6e,
	'i32.rem_s': 0x6f,
	'i32.rem_u': 0x70,
	'i32.and': 0x71,
	'i32.or': 0x72,
	'i32.xor': 0x73,
	'i32.shl': 0x74,
	'i32.shr_s': 0x75,
	'i32.shr_u': 0x76,
	'i32.rotl': 0x77,
	'i32.rotr': 0x78,
	'i64.clz': 0x79,
	'i64.ctz': 0x7a,
	'i64.popcnt': 0x7b,
	'i64.div_s': 0x7f,
	'i64.div_u': 0x80,
	'i64.rem_s': 0x81,
	'i64.rem_u': 0x82,
	'i64.and': 0x83,
	'i64.or': 0x84,
	'i64.xor': 0x85,
	'i64.shl': 0x86,
	'i64.shr_s': 0x87,
	'i64.shr_u': 0x88,
	'i64.rotl': 0x89,
	'i64.rotr': 0x8a,
	'f32.abs': 0x8b,
	'f32.neg': 0x8c,
	'f32.ceil': 0x8d,
	'f32.floor': 0x8e,
	'f32.trunc': 0x8f,
	'f32.nearest': 0x90,
	'f32.sqrt': 0x91,
	'f32.add': 0x92,
	'f32.sub': 0x93,
	'f32.mul': 0x94,
	'f32.div': 0x95,
	'f32.min': 0x96,
	'f32.max': 0x97,
	'f32.copysign': 0x98,
	'f64.abs': 0x99,
	'f64.neg': 0x9a,
	'f64.ceil': 0x9b,
	'f64.floor': 0x9c,
	'f64.trunc': 0x9d,
	'f64.nearest': 0x9e,
	'f64.sqrt': 0x9f,
	'f64.add': 0xa0,
	'f64.sub': 0xa1,
	'f64.mul': 0xa2,
	'f64.div': 0xa3,
	'f64.min': 0xa4,
	'f64.max': 0xa5,
	'f64.copysign': 0xa6,
	'i32.wrap_i64': 0xa7,
	'i32.trunc_f32_s': 0xa8,
	'i32.trunc_f32_u': 0xa9,
	'i32.trunc_f64_s': 0xaa,
	'i32.trunc_f64_u': 0xab,
	'i64.extend_i32_s': 0xac,
	'i64.extend_i32_u': 0xad,
	'i64.trunc_f32_s': 0xae,
	'i64.trunc_f32_u': 0xaf,
	'i64.trunc_f64_s': 0xb0,
	'i64.trunc_f64_u': 0xb1,
	'f32.convert_i32_s': 0xb2,
	'f32.convert_i32_u': 0xb3,
	'f32.convert_i64_s': 0xb4,
	'f32.convert_i64_u': 0xb5,
	'f32.demote_f64': 0xb6,
	'f64.convert_i32_s': 0xb7,
	'f64.convert_i32_u': 0xb8,
	'f64.convert_i64_s': 0xb9,
	'f64.convert_i64_u': 0xba,
	'f64.promote_f32': 0xbb,
	'i32.reinterpret_f32': 0xbc,
	'i64.reinterpret_f64': 0xbd,
	'f32.reinterpret_i32': 0xbe,
	'f64.reinterpret_i64': 0xbf,

	// Sign extension:
	'i32.extend8_s': 0xc0,
	'i32.extend16_s': 0xc1,
	'i64.extend8_s': 0xc2,
	'i64.extend16_s': 0xc3,
	'i64.extend32_s': 0xc4,

	// Reference equality
	'ref.eq': 0xd3,

	// For compatibility with Asm.js.
	// These opcodes are not spec'ed (or visible) externally; the idea is,
	// to use unused ranges for internal purposes.
	'f64.acos': 0xdc,
	'f64.asin': 0xdd,
	'f64.atan': 0xde,
	'f64.cos': 0xdf,
	'f64.sin': 0xe0,
	'f64.tan': 0xe1,
	'f64.exp': 0xe2,
	'f64.log': 0xe3,
	'f64.atan2': 0xe4,
	'f64.pow': 0xe5,
	'f64.mod': 0xe6,
	'i32.asmjs_div_s': 0xe7,
	'i32.asmjs_div_u': 0xe8,
	'i32.asmjs_rem_s': 0xe9,
	'i32.asmjs_rem_u': 0xea,
	'i32.asmjs_load8_s': 0xeb,
	'i32.asmjs_load8_u': 0xec,
	'i32.asmjs_load16_s': 0xed,
	'i32.asmjs_load16_u': 0xee,
	'i32.asmjs_load32': 0xef,
	'f32.asmjs_load': 0xf0,
	'f64.asmjs_load': 0xf1,
	'i32.asmjs_store8': 0xf2,
	'i32.asmjs_store16': 0xf3,
	'i32.asmjs_store': 0xf4,
	'f32.asmjs_store': 0xf5,
	'f64.asmjs_store': 0xf6,
	'i32.asmjs_convert_f32_s': 0xf7,
	'i32.asmjs_convert_f32_u': 0xf8,
	'i32.asmjs_convert_f64_s': 0xf9,
	'i32.asmjs_convert_f64_u': 0xfa,

	// SIMD
	'v128.load': 0xfd00,
	'v128.load8x8_s': 0xfd01,
	'v128.load8x8_u': 0xfd02,
	'v128.load16x4_s': 0xfd03,
	'v128.load16x4_u': 0xfd04,
	'v128.load32x2_s': 0xfd05,
	'v128.load32x2_u': 0xfd06,
	'v128.load8_splat': 0xfd07,
	'v128.load16_splat': 0xfd08,
	'v128.load32_splat': 0xfd09,
	'v128.load64_splat': 0xfd0a,
	'v128.store': 0xfd0b,
	'v128.load32_zero': 0xfd5c,
	'v128.load64_zero': 0xfd5d,
	'v128.load8_lane': 0xfd54,
	'v128.load16_lane': 0xfd55,
	'v128.load32_lane': 0xfd56,
	'v128.load64_lane': 0xfd57,
	'v128.store8_lane': 0xfd58,
	'v128.store16_lane': 0xfd59,
	'v128.store32_lane': 0xfd5a,
	'v128.store64_lane': 0xfd5b,
	'v128.const': 0xfd0c,
	'i8x16.shuffle': 0xfd0d,
	'i8x16.swizzle': 0xfd0e,
	'i8x16.splat': 0xfd0f,
	'i16x8.splat': 0xfd10,
	'i32x4.splat': 0xfd11,
	'i64x2.splat': 0xfd12,
	'f32x4.splat': 0xfd13,
	'f64x2.splat': 0xfd14,
	'i8x16.eq': 0xfd23,
	'i8x16.ne': 0xfd24,
	'i8x16.lt_s': 0xfd25,
	'i8x16.lt_u': 0xfd26,
	'i8x16.gt_s': 0xfd27,
	'i8x16.gt_u': 0xfd28,
	'i8x16.le_s': 0xfd29,
	'i8x16.le_u': 0xfd2a,
	'i8x16.ge_s': 0xfd2b,
	'i8x16.ge_u': 0xfd2c,
	'i16x8.eq': 0xfd2d,
	'i16x8.ne': 0xfd2e,
	'i16x8.lt_s': 0xfd2f,
	'i16x8.lt_u': 0xfd30,
	'i16x8.gt_s': 0xfd31,
	'i16x8.gt_u': 0xfd32,
	'i16x8.le_s': 0xfd33,
	'i16x8.le_u': 0xfd34,
	'i16x8.ge_s': 0xfd35,
	'i16x8.ge_u': 0xfd36,
	'i32x4.eq': 0xfd37,
	'i32x4.ne': 0xfd38,
	'i32x4.lt_s': 0xfd39,
	'i32x4.lt_u': 0xfd3a,
	'i32x4.gt_s': 0xfd3b,
	'i32x4.gt_u': 0xfd3c,
	'i32x4.le_s': 0xfd3d,
	'i32x4.le_u': 0xfd3e,
	'i32x4.ge_s': 0xfd3f,
	'i32x4.ge_u': 0xfd40,
	'f32x4.eq': 0xfd41,
	'f32x4.ne': 0xfd42,
	'f32x4.lt': 0xfd43,
	'f32x4.gt': 0xfd44,
	'f32x4.le': 0xfd45,
	'f32x4.ge': 0xfd46,
	'f64x2.eq': 0xfd47,
	'f64x2.ne': 0xfd48,
	'f64x2.lt': 0xfd49,
	'f64x2.gt': 0xfd4a,
	'f64x2.le': 0xfd4b,
	'f64x2.ge': 0xfd4c,
	'v128.not': 0xfd4d,
	'v128.and': 0xfd4e,
	'v128.andnot': 0xfd4f,
	'v128.or': 0xfd50,
	'v128.xor': 0xfd51,
	'v128.bitselect': 0xfd52,
	'v128.any_true': 0xfd53,
	'f32x4.demote_f64x2_zero': 0xfd5e,
	'f64x2.promote_low_f32x4': 0xfd5f,
	'i8x16.abs': 0xfd60,
	'i8x16.neg': 0xfd61,
	'i8x16.popcnt': 0xfd62,
	'i8x16.all_true': 0xfd63,
	'i8x16.bitmask': 0xfd64,
	'i8x16.narrow_i16x8_s': 0xfd65,
	'i8x16.narrow_i16x8_u': 0xfd66,
	'f32x4.ceil': 0xfd67,
	'f32x4.floor': 0xfd68,
	'f32x4.trunc': 0xfd69,
	'f32x4.nearest': 0xfd6a,
	'i8x16.shl': 0xfd6b,
	'i8x16.shr_s': 0xfd6c,
	'i8x16.shr_u': 0xfd6d,
	'i8x16.add': 0xfd6e,
	'i8x16.add_sat_s': 0xfd6f,
	'i8x16.add_sat_u': 0xfd70,
	'i8x16.sub': 0xfd71,
	'i8x16.sub_sat_s': 0xfd72,
	'i8x16.sub_sat_u': 0xfd73,
	'f64x2.ceil': 0xfd74,
	'f64x2.floor': 0xfd75,
	'i8x16.min_s': 0xfd76,
	'i8x16.min_u': 0xfd77,
	'i8x16.max_s': 0xfd78,
	'i8x16.max_u': 0xfd79,
	'f64x2.trunc': 0xfd7a,
	'i8x16.avgr_u': 0xfd7b,
	'i16x8.extadd_pairwise_i8x16_s': 0xfd7c,
	'i16x8.extadd_pairwise_i8x16_u': 0xfd7d,
	'i32x4.extadd_pairwise_i16x8_s': 0xfd7e,
	'i32x4.extadd_pairwise_i16x8_u': 0xfd7f,
	'i16x8.abs': 0xfd80,
	'i16x8.neg': 0xfd81,
	'i16x8.q15mulr_sat_s': 0xfd82,
	'i16x8.all_true': 0xfd83,
	'i16x8.bitmask': 0xfd84,
	'i16x8.narrow_i32x4_s': 0xfd85,
	'i16x8.narrow_i32x4_u': 0xfd86,
	'i16x8.extend_low_i8x16_s': 0xfd87,
	'i16x8.extend_high_i8x16_s': 0xfd88,
	'i16x8.extend_low_i8x16_u': 0xfd89,
	'i16x8.extend_high_i8x16_u': 0xfd8a,
	'i16x8.shl': 0xfd8b,
	'i16x8.shr_s': 0xfd8c,
	'i16x8.shr_u': 0xfd8d,
	'i16x8.add': 0xfd8e,
	'i16x8.add_sat_s': 0xfd8f,
	'i16x8.add_sat_u': 0xfd90,
	'i16x8.sub': 0xfd91,
	'i16x8.sub_sat_s': 0xfd92,
	'i16x8.sub_sat_u': 0xfd93,
	'f64x2.nearest': 0xfd94,
	'i16x8.mul': 0xfd95,
	'i16x8.min_s': 0xfd96,
	'i16x8.min_u': 0xfd97,
	'i16x8.max_s': 0xfd98,
	'i16x8.max_u': 0xfd99,
	'i16x8.avgr_u': 0xfd9b,
	'i16x8.extmul_low_i8x16_s': 0xfd9c,
	'i16x8.extmul_high_i8x16_s': 0xfd9d,
	'i16x8.extmul_low_i8x16_u': 0xfd9e,
	'i16x8.extmul_high_i8x16_u': 0xfd9f,
	'i32x4.abs': 0xfda0,
	'i32x4.neg': 0xfda1,
	'i32x4.all_true': 0xfda3,
	'i32x4.bitmask': 0xfda4,
	'i32x4.extend_low_i16x8_s': 0xfda7,
	'i32x4.extend_high_i16x8_s': 0xfda8,
	'i32x4.extend_low_i16x8_u': 0xfda9,
	'i32x4.extend_high_i16x8_u': 0xfdaa,
	'i32x4.shl': 0xfdab,
	'i32x4.shr_s': 0xfdac,
	'i32x4.shr_u': 0xfdad,
	'i32x4.add': 0xfdae,
	'i32x4.sub': 0xfdb1,
	'i32x4.mul': 0xfdb5,
	'i32x4.min_s': 0xfdb6,
	'i32x4.min_u': 0xfdb7,
	'i32x4.max_s': 0xfdb8,
	'i32x4.max_u': 0xfdb9,
	'i32x4.dot_i16x8_s': 0xfdba,
	'i32x4.extmul_low_i16x8_s': 0xfdbc,
	'i32x4.extmul_high_i16x8_s': 0xfdbd,
	'i32x4.extmul_low_i16x8_u': 0xfdbe,
	'i32x4.extmul_high_i16x8_u': 0xfdbf,
	'i64x2.abs': 0xfdc0,
	'i64x2.neg': 0xfdc1,
	'i64x2.all_true': 0xfdc3,
	'i64x2.bitmask': 0xfdc4,
	'i64x2.extend_low_i32x4_s': 0xfdc7,
	'i64x2.extend_high_i32x4_s': 0xfdc8,
	'i64x2.extend_low_i32x4_u': 0xfdc9,
	'i64x2.extend_high_i32x4_u': 0xfdca,
	'i64x2.shl': 0xfdcb,
	'i64x2.shr_s': 0xfdcc,
	'i64x2.shr_u': 0xfdcd,
	'i64x2.add': 0xfdce,
	'i64x2.sub': 0xfdd1,
	'i64x2.mul': 0xfdd5,
	'i64x2.eq': 0xfdd6,
	'i64x2.ne': 0xfdd7,
	'i64x2.lt_s': 0xfdd8,
	'i64x2.gt_s': 0xfdd9,
	'i64x2.le_s': 0xfdda,
	'i64x2.ge_s': 0xfddb,
	'i64x2.extmul_low_i32x4_s': 0xfddc,
	'i64x2.extmul_high_i32x4_s': 0xfddd,
	'i64x2.extmul_low_i32x4_u': 0xfdde,
	'i64x2.extmul_high_i32x4_u': 0xfddf,
	'f32x4.abs': 0xfde0,
	'f32x4.neg': 0xfde1,
	'f32x4.sqrt': 0xfde3,
	'f32x4.add': 0xfde4,
	'f32x4.sub': 0xfde5,
	'f32x4.mul': 0xfde6,
	'f32x4.div': 0xfde7,
	'f32x4.min': 0xfde8,
	'f32x4.max': 0xfde9,
	'f32x4.pmin': 0xfdea,
	'f32x4.pmax': 0xfdeb,
	'f64x2.abs': 0xfdec,
	'f64x2.neg': 0xfded,
	'f64x2.sqrt': 0xfdef,
	'f64x2.add': 0xfdf0,
	'f64x2.sub': 0xfdf1,
	'f64x2.mul': 0xfdf2,
	'f64x2.div': 0xfdf3,
	'f64x2.min': 0xfdf4,
	'f64x2.max': 0xfdf5,
	'f64x2.pmin': 0xfdf6,
	'f64x2.pmax': 0xfdf7,
	'i32x4.trunc_sat_f32x4_s': 0xfdf8,
	'i32x4.trunc_sat_f32x4_u': 0xfdf9,
	'f32x4.convert_i32x4_s': 0xfdfa,
	'f32x4.convert_i32x4_u': 0xfdfb,
	'i32x4.trunc_sat_f64x2_s_zero': 0xfdfc,
	'i32x4.trunc_sat_f64x2_u_zero': 0xfdfd,
	'f64x2.convert_low_i32x4_s': 0xfdfe,
	'f64x2.convert_low_i32x4_u': 0xfdff,

	// Relaxed SIMD
	'i8x16.relaxed_swizzle': 0xfd100,
	'i32x4.relaxed_trunc_f32x4_s': 0xfd101,
	'i32x4.relaxed_trunc_f32x4_u': 0xfd102,
	'i32x4.relaxed_trunc_f64x2_s_zero': 0xfd103,
	'i32x4.relaxed_trunc_f64x2_u_zero': 0xfd104,
	'f32x4.qfma': 0xfd105,
	'f32x4.qfms': 0xfd106,
	'f64x2.qfma': 0xfd107,
	'f64x2.qfms': 0xfd108,
	'i8x16.relaxed_laneselect': 0xfd109,
	'i16x8.relaxed_laneselect': 0xfd10a,
	'i32x4.relaxed_laneselect': 0xfd10b,
	'i64x2.relaxed_laneselect': 0xfd10c,
	'f32x4.relaxed_min': 0xfd10d,
	'f32x4.relaxed_max': 0xfd10e,
	'f64x2.relaxed_min': 0xfd10f,
	'f64x2.relaxed_max': 0xfd110,
	'i16x8.relaxed_q15mulr_s': 0xfd111,
	'i16x8.dot_i8x16_i7x16_s': 0xfd112,
	'i32x4.dot_i8x16_i7x16_add_s': 0xfd113,

	// Float16 SIMD
	'f16x8.splat': 0xfd120,
	'f16x8.abs': 0xfd130,
	'f16x8.neg': 0xfd131,
	'f16x8.sqrt': 0xfd132,
	'f16x8.ceil': 0xfd133,
	'f16x8.floor': 0xfd134,
	'f16x8.trunc': 0xfd135,
	'f16x8.nearest': 0xfd136,
	'f16x8.eq': 0xfd137,
	'f16x8.ne': 0xfd138,
	'f16x8.lt': 0xfd139,
	'f16x8.gt': 0xfd13a,
	'f16x8.le': 0xfd13b,
	'f16x8.ge': 0xfd13c,
	'f16x8.add': 0xfd13d,
	'f16x8.sub': 0xfd13e,
	'f16x8.mul': 0xfd13f,
	'f16x8.div': 0xfd140,
	'f16x8.min': 0xfd141,
	'f16x8.max': 0xfd142,
	'f16x8.pmin': 0xfd143,
	'f16x8.pmax': 0xfd144,
	'i16x8.trunc_sat_f16x8_s': 0xfd145,
	'i16x8.trunc_sat_f16x8_u': 0xfd146,
	'f16x8.convert_i16x8_s': 0xfd147,
	'f16x8.convert_i16x8_u': 0xfd148,
	'f16x8.demote_f32x4_zero': 0xfd149,
	'f16x8.demote_f64x2_zero': 0xfd14a,
	'f32x4.promote_low_f16x8': 0xfd14b,
	'f16x8.madd': 0xfd14e,
	'f16x8.nmadd': 0xfd14f,

	// SIMD: extract and replace lane
	'i8x16.extract_lane_s': 0xfd15,
	'i8x16.extract_lane_u': 0xfd16,
	'i16x8.extract_lane_s': 0xfd18,
	'i16x8.extract_lane_u': 0xfd19,
	'i32x4.extract_lane': 0xfd1b,
	'i64x2.extract_lane': 0xfd1d,
	'f32x4.extract_lane': 0xfd1f,
	'f64x2.extract_lane': 0xfd21,
	'f16x8.extract_lane': 0xfd121,

	'i8x16.replace_lane': 0xfd17,
	'i16x8.replace_lane': 0xfd1a,
	'i32x4.replace_lane': 0xfd1c,
	'i64x2.replace_lane': 0xfd1e,
	'f32x4.replace_lane': 0xfd20,
	'f64x2.replace_lane': 0xfd22,
	'f16x8.replace_lane': 0xfd122,

	// Saturated conversions
	'i32.trunc_sat_f32_s': 0xfc00,
	'i32.trunc_sat_f32_u': 0xfc01,
	'i32.trunc_sat_f64_s': 0xfc02,
	'i32.trunc_sat_f64_u': 0xfc03,
	'i64.trunc_sat_f32_s': 0xfc04,
	'i64.trunc_sat_f32_u': 0xfc05,
	'i64.trunc_sat_f64_s': 0xfc06,
	'i64.trunc_sat_f64_u': 0xfc07,

	// Data operations
	'data.drop': 0xfc09,

	// Table operations
	'table.init': 0xfc0c,
	'elem.drop': 0xfc0d,
	'table.copy': 0xfc0e,
	'table.size': 0xfc10,

	// Bulk memory operations
	'memory.init': 0xfc08,
	'memory.copy': 0xfc0a,
	'memory.fill': 0xfc0b,

	// 'table.grow' is polymorphic in the first parameter. It's whatever the table type is.
	'table.grow': 0xfc0f,

	// 'table.fill' is polymorphic in the second parameter. It's whatever the table type is.
	'table.fill': 0xfc11,

	// Atomic operations
	'memory.atomic.notify': 0xfe00,
	'memory.atomic.wait32': 0xfe01,
	'memory.atomic.wait64': 0xfe02,
	'i32.atomic.load': 0xfe10,
	'i64.atomic.load': 0xfe11,
	'i32.atomic.load8_u': 0xfe12,
	'i32.atomic.load16_u': 0xfe13,
	'i64.atomic.load8_u': 0xfe14,
	'i64.atomic.load16_u': 0xfe15,
	'i64.atomic.load32_u': 0xfe16,
	'i32.atomic.store': 0xfe17,
	'i64.atomic.store': 0xfe18,
	'i32.atomic.store8': 0xfe19,
	'i32.atomic.store16': 0xfe1a,
	'i64.atomic.store8': 0xfe1b,
	'i64.atomic.store16': 0xfe1c,
	'i64.atomic.store32': 0xfe1d,
	'i32.atomic.rmw.add': 0xfe1e,
	'i64.atomic.rmw.add': 0xfe1f,
	'i32.atomic.rmw8.add_u': 0xfe20,
	'i32.atomic.rmw16.add_u': 0xfe21,
	'i64.atomic.rmw8.add_u': 0xfe22,
	'i64.atomic.rmw16.add_u': 0xfe23,
	'i64.atomic.rmw32.add_u': 0xfe24,
	'i32.atomic.rmw.sub': 0xfe25,
	'i64.atomic.rmw.sub': 0xfe26,
	'i32.atomic.rmw8.sub_u': 0xfe27,
	'i32.atomic.rmw16.sub_u': 0xfe28,
	'i64.atomic.rmw8.sub_u': 0xfe29,
	'i64.atomic.rmw16.sub_u': 0xfe2a,
	'i64.atomic.rmw32.sub_u': 0xfe2b,
	'i32.atomic.rmw.and': 0xfe2c,
	'i64.atomic.rmw.and': 0xfe2d,
	'i32.atomic.rmw8.and_u': 0xfe2e,
	'i32.atomic.rmw16.and_u': 0xfe2f,
	'i64.atomic.rmw8.and_u': 0xfe30,
	'i64.atomic.rmw16.and_u': 0xfe31,
	'i64.atomic.rmw32.and_u': 0xfe32,
	'i32.atomic.rmw.or': 0xfe33,
	'i64.atomic.rmw.or': 0xfe34,
	'i32.atomic.rmw8.or_u': 0xfe35,
	'i32.atomic.rmw16.or_u': 0xfe36,
	'i64.atomic.rmw8.or_u': 0xfe37,
	'i64.atomic.rmw16.or_u': 0xfe38,
	'i64.atomic.rmw32.or_u': 0xfe39,
	'i32.atomic.rmw.xor': 0xfe3a,
	'i64.atomic.rmw.xor': 0xfe3b,
	'i32.atomic.rmw8.xor_u': 0xfe3c,
	'i32.atomic.rmw16.xor_u': 0xfe3d,
	'i64.atomic.rmw8.xor_u': 0xfe3e,
	'i64.atomic.rmw16.xor_u': 0xfe3f,
	'i64.atomic.rmw32.xor_u': 0xfe40,
	'i32.atomic.rmw.xchg': 0xfe41,
	'i64.atomic.rmw.xchg': 0xfe42,
	'i32.atomic.rmw8.xchg_u': 0xfe43,
	'i32.atomic.rmw16.xchg_u': 0xfe44,
	'i64.atomic.rmw8.xchg_u': 0xfe45,
	'i64.atomic.rmw16.xchg_u': 0xfe46,
	'i64.atomic.rmw32.xchg_u': 0xfe47,
	'i32.atomic.rmw.cmpxchg': 0xfe48,
	'i64.atomic.rmw.cmpxchg': 0xfe49,
	'i32.atomic.rmw8.cmpxchg_u': 0xfe4a,
	'i32.atomic.rmw16.cmpxchg_u': 0xfe4b,
	'i64.atomic.rmw8.cmpxchg_u': 0xfe4c,
	'i64.atomic.rmw16.cmpxchg_u': 0xfe4d,
	'i64.atomic.rmw32.cmpxchg_u': 0xfe4e,

	// 'atomic.fence' doesn't target a particular linear memory.
	'atomic.fence': 0xfe03,

	// Garbage collected heap
	'struct.new': 0xfb00,
	'struct.new_default': 0xfb01,
	'struct.get': 0xfb02,
	'struct.get_s': 0xfb03,
	'struct.get_u': 0xfb04,
	'struct.set': 0xfb05,
	'array.new': 0xfb06,
	'array.new_default': 0xfb07,
	'array.new_fixed': 0xfb08,
	'array.new_data': 0xfb09,
	'array.new_elem': 0xfb0a,
	'array.get': 0xfb0b,
	'array.get_s': 0xfb0c,
	'array.get_u': 0xfb0d,
	'array.set': 0xfb0e,
	'array.len': 0xfb0f,
	'array.fill': 0xfb10,
	'array.copy': 0xfb11,
	'array.init_data': 0xfb12,
	'array.init_elem': 0xfb13,
	'ref.test': 0xfb14,
	'ref.test_nullable': 0xfb15,
	'ref.cast': 0xfb16,
	'ref.cast_nullable': 0xfb17,
	'br_on_cast': 0xfb18,
	'br_on_cast_fail': 0xfb19,
	'any.convert_extern': 0xfb1a,
	'extern.convert_any': 0xfb1b,
	'ref.i31': 0xfb1c,
	'i31.get_s': 0xfb1d,
	'i31.get_u': 0xfb1e,
	'ref.cast_nop': 0xfb4c,

	// String references proposal:
	'string.new_utf8': 0xfb80,
	'string.new_wtf16': 0xfb81,
	'string.const': 0xfb82,
	'string.measure_utf8': 0xfb83,
	'string.measure_wtf8': 0xfb84,
	'string.measure_wtf16': 0xfb85,
	'string.encode_utf8': 0xfb86,
	'string.encode_wtf16': 0xfb87,
	'string.concat': 0xfb88,
	'string.eq': 0xfb89,
	'string.is_usv_sequence': 0xfb8a,
	'string.new_lossy_utf8': 0xfb8b,
	'string.new_wtf8': 0xfb8c,
	'string.encode_lossy_utf8': 0xfb8d,
	'string.encode_wtf8': 0xfb8e,
	'string.new_utf8_try': 0xfb8f,
	'string.as_wtf8': 0xfb90,
	'stringview_wtf8.advance': 0xfb91,
	'stringview_wtf8.encode_utf8': 0xfb92,
	'stringview_wtf8.slice': 0xfb93,
	'stringview_wtf8.encode_lossy_utf8': 0xfb94,
	'stringview_wtf8.encode_wtf8': 0xfb95,
	'string.as_wtf16': 0xfb98,
	'stringview_wtf16.length': 0xfb99,
	'stringview_wtf16.get_codeunit': 0xfb9a,
	'stringview_wtf16.encode': 0xfb9b,
	'stringview_wtf16.slice': 0xfb9c,
	'string.as_iter': 0xfba0,
	'stringview_iter.next': 0xfba1,
	'stringview_iter.advance': 0xfba2,
	'stringview_iter.rewind': 0xfba3,
	'stringview_iter.slice': 0xfba4,
	'string.compare': 0xfba8,
	'string.from_code_point': 0xfba9,
	'string.hash': 0xfbaa,
	'string.new_utf8_array': 0xfbb0,
	'string.new_wtf16_array': 0xfbb1,
	'string.encode_utf8_array': 0xfbb2,
	'string.encode_wtf16_array': 0xfbb3,
	'string.new_lossy_utf8_array': 0xfbb4,
	'string.new_wtf8_array': 0xfbb5,
	'string.encode_lossy_utf8_array': 0xfbb6,
	'string.encode_wtf8_array': 0xfbb7,
	'string.new_utf8_array_try': 0xfbb8,
}

export type OpcodeName = keyof typeof wasmOpcodes
